#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.17929
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ttxy.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="yxg_landata")]
	public partial class LinqDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertS_city(S_city instance);
    partial void UpdateS_city(S_city instance);
    partial void DeleteS_city(S_city instance);
    partial void InsertS_controlcenter(S_controlcenter instance);
    partial void UpdateS_controlcenter(S_controlcenter instance);
    partial void DeleteS_controlcenter(S_controlcenter instance);
    partial void InsertU_firehouse(U_firehouse instance);
    partial void UpdateU_firehouse(U_firehouse instance);
    partial void DeleteU_firehouse(U_firehouse instance);
    partial void InsertU_firemanage(U_firemanage instance);
    partial void UpdateU_firemanage(U_firemanage instance);
    partial void DeleteU_firemanage(U_firemanage instance);
    partial void InsertU_nodedata(U_nodedata instance);
    partial void UpdateU_nodedata(U_nodedata instance);
    partial void DeleteU_nodedata(U_nodedata instance);
    partial void InsertU_equipdata(U_equipdata instance);
    partial void UpdateU_equipdata(U_equipdata instance);
    partial void DeleteU_equipdata(U_equipdata instance);
    partial void InsertS_lantype(S_lantype instance);
    partial void UpdateS_lantype(S_lantype instance);
    partial void DeleteS_lantype(S_lantype instance);
    partial void InsertS_lancate(S_lancate instance);
    partial void UpdateS_lancate(S_lancate instance);
    partial void DeleteS_lancate(S_lancate instance);
    partial void InsertU_property(U_property instance);
    partial void UpdateU_property(U_property instance);
    partial void DeleteU_property(U_property instance);
    partial void InsertU_maintenance(U_maintenance instance);
    partial void UpdateU_maintenance(U_maintenance instance);
    partial void DeleteU_maintenance(U_maintenance instance);
    partial void InsertS_log(S_log instance);
    partial void UpdateS_log(S_log instance);
    partial void DeleteS_log(S_log instance);
    partial void InsertU_equiptype(U_equiptype instance);
    partial void UpdateU_equiptype(U_equiptype instance);
    partial void DeleteU_equiptype(U_equiptype instance);
    partial void InsertS_equipstatus(S_equipstatus instance);
    partial void UpdateS_equipstatus(S_equipstatus instance);
    partial void DeleteS_equipstatus(S_equipstatus instance);
    partial void InsertS_area(S_area instance);
    partial void UpdateS_area(S_area instance);
    partial void DeleteS_area(S_area instance);
    partial void InsertU_news(U_news instance);
    partial void UpdateU_news(U_news instance);
    partial void DeleteU_news(U_news instance);
    partial void InsertU_members(U_members instance);
    partial void UpdateU_members(U_members instance);
    partial void DeleteU_members(U_members instance);
    partial void InsertU_landata(U_landata instance);
    partial void UpdateU_landata(U_landata instance);
    partial void DeleteU_landata(U_landata instance);
    #endregion
		
		public LinqDataContext() : 
				base(global::ttxy.DAL.Properties.Settings.Default.qhb_landataConnectionString4, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<S_city> S_city
		{
			get
			{
				return this.GetTable<S_city>();
			}
		}
		
		public System.Data.Linq.Table<S_controlcenter> S_controlcenter
		{
			get
			{
				return this.GetTable<S_controlcenter>();
			}
		}
		
		public System.Data.Linq.Table<U_firehouse> U_firehouse
		{
			get
			{
				return this.GetTable<U_firehouse>();
			}
		}
		
		public System.Data.Linq.Table<U_firemanage> U_firemanage
		{
			get
			{
				return this.GetTable<U_firemanage>();
			}
		}
		
		public System.Data.Linq.Table<U_nodedata> U_nodedata
		{
			get
			{
				return this.GetTable<U_nodedata>();
			}
		}
		
		public System.Data.Linq.Table<U_equipdata> U_equipdata
		{
			get
			{
				return this.GetTable<U_equipdata>();
			}
		}
		
		public System.Data.Linq.Table<S_lantype> S_lantype
		{
			get
			{
				return this.GetTable<S_lantype>();
			}
		}
		
		public System.Data.Linq.Table<S_lancate> S_lancate
		{
			get
			{
				return this.GetTable<S_lancate>();
			}
		}
		
		public System.Data.Linq.Table<U_property> U_property
		{
			get
			{
				return this.GetTable<U_property>();
			}
		}
		
		public System.Data.Linq.Table<U_maintenance> U_maintenance
		{
			get
			{
				return this.GetTable<U_maintenance>();
			}
		}
		
		public System.Data.Linq.Table<S_log> S_log
		{
			get
			{
				return this.GetTable<S_log>();
			}
		}
		
		public System.Data.Linq.Table<U_equiptype> U_equiptype
		{
			get
			{
				return this.GetTable<U_equiptype>();
			}
		}
		
		public System.Data.Linq.Table<S_equipstatus> S_equipstatus
		{
			get
			{
				return this.GetTable<S_equipstatus>();
			}
		}
		
		public System.Data.Linq.Table<S_area> S_area
		{
			get
			{
				return this.GetTable<S_area>();
			}
		}
		
		public System.Data.Linq.Table<U_news> U_news
		{
			get
			{
				return this.GetTable<U_news>();
			}
		}
		
		public System.Data.Linq.Table<U_members> U_members
		{
			get
			{
				return this.GetTable<U_members>();
			}
		}
		
		public System.Data.Linq.Table<U_landata> U_landata
		{
			get
			{
				return this.GetTable<U_landata>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.S_city")]
	public partial class S_city : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _id;
		
		private string _cityname;
		
		private short _sort;
		
		private bool _isused;
		
		private EntitySet<S_area> _S_area;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(short value);
    partial void OnidChanged();
    partial void OncitynameChanging(string value);
    partial void OncitynameChanged();
    partial void OnsortChanging(short value);
    partial void OnsortChanged();
    partial void OnisusedChanging(bool value);
    partial void OnisusedChanged();
    #endregion
		
		public S_city()
		{
			this._S_area = new EntitySet<S_area>(new Action<S_area>(this.attach_S_area), new Action<S_area>(this.detach_S_area));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cityname", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string cityname
		{
			get
			{
				return this._cityname;
			}
			set
			{
				if ((this._cityname != value))
				{
					this.OncitynameChanging(value);
					this.SendPropertyChanging();
					this._cityname = value;
					this.SendPropertyChanged("cityname");
					this.OncitynameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sort", DbType="SmallInt NOT NULL")]
		public short sort
		{
			get
			{
				return this._sort;
			}
			set
			{
				if ((this._sort != value))
				{
					this.OnsortChanging(value);
					this.SendPropertyChanging();
					this._sort = value;
					this.SendPropertyChanged("sort");
					this.OnsortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isused", DbType="Bit NOT NULL")]
		public bool isused
		{
			get
			{
				return this._isused;
			}
			set
			{
				if ((this._isused != value))
				{
					this.OnisusedChanging(value);
					this.SendPropertyChanging();
					this._isused = value;
					this.SendPropertyChanged("isused");
					this.OnisusedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="S_city_S_area", Storage="_S_area", ThisKey="id", OtherKey="cid")]
		public EntitySet<S_area> S_area
		{
			get
			{
				return this._S_area;
			}
			set
			{
				this._S_area.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_S_area(S_area entity)
		{
			this.SendPropertyChanging();
			entity.S_city = this;
		}
		
		private void detach_S_area(S_area entity)
		{
			this.SendPropertyChanging();
			entity.S_city = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.S_controlcenter")]
	public partial class S_controlcenter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _id;
		
		private string _name;
		
		private short _aid;
		
		private string _description;
		
		private bool _isused;
		
		private EntityRef<S_area> _S_area;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(short value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnaidChanging(short value);
    partial void OnaidChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnisusedChanging(bool value);
    partial void OnisusedChanged();
    #endregion
		
		public S_controlcenter()
		{
			this._S_area = default(EntityRef<S_area>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_aid", DbType="SmallInt NOT NULL")]
		public short aid
		{
			get
			{
				return this._aid;
			}
			set
			{
				if ((this._aid != value))
				{
					if (this._S_area.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnaidChanging(value);
					this.SendPropertyChanging();
					this._aid = value;
					this.SendPropertyChanged("aid");
					this.OnaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isused", DbType="Bit NOT NULL")]
		public bool isused
		{
			get
			{
				return this._isused;
			}
			set
			{
				if ((this._isused != value))
				{
					this.OnisusedChanging(value);
					this.SendPropertyChanging();
					this._isused = value;
					this.SendPropertyChanged("isused");
					this.OnisusedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="S_area_S_controlcenter", Storage="_S_area", ThisKey="aid", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public S_area S_area
		{
			get
			{
				return this._S_area.Entity;
			}
			set
			{
				S_area previousValue = this._S_area.Entity;
				if (((previousValue != value) 
							|| (this._S_area.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._S_area.Entity = null;
						previousValue.S_controlcenter.Remove(this);
					}
					this._S_area.Entity = value;
					if ((value != null))
					{
						value.S_controlcenter.Add(this);
						this._aid = value.id;
					}
					else
					{
						this._aid = default(short);
					}
					this.SendPropertyChanged("S_area");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.U_firehouse")]
	public partial class U_firehouse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _id;
		
		private string _name;
		
		private double _lng;
		
		private double _lat;
		
		private short _aid;
		
		private string _description;
		
		private bool _isused;
		
		private EntityRef<S_area> _S_area;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(short value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnlngChanging(double value);
    partial void OnlngChanged();
    partial void OnlatChanging(double value);
    partial void OnlatChanged();
    partial void OnaidChanging(short value);
    partial void OnaidChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnisusedChanging(bool value);
    partial void OnisusedChanged();
    #endregion
		
		public U_firehouse()
		{
			this._S_area = default(EntityRef<S_area>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lng", DbType="Float NOT NULL")]
		public double lng
		{
			get
			{
				return this._lng;
			}
			set
			{
				if ((this._lng != value))
				{
					this.OnlngChanging(value);
					this.SendPropertyChanging();
					this._lng = value;
					this.SendPropertyChanged("lng");
					this.OnlngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lat", DbType="Float NOT NULL")]
		public double lat
		{
			get
			{
				return this._lat;
			}
			set
			{
				if ((this._lat != value))
				{
					this.OnlatChanging(value);
					this.SendPropertyChanging();
					this._lat = value;
					this.SendPropertyChanged("lat");
					this.OnlatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_aid", DbType="SmallInt NOT NULL")]
		public short aid
		{
			get
			{
				return this._aid;
			}
			set
			{
				if ((this._aid != value))
				{
					if (this._S_area.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnaidChanging(value);
					this.SendPropertyChanging();
					this._aid = value;
					this.SendPropertyChanged("aid");
					this.OnaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isused", DbType="Bit NOT NULL")]
		public bool isused
		{
			get
			{
				return this._isused;
			}
			set
			{
				if ((this._isused != value))
				{
					this.OnisusedChanging(value);
					this.SendPropertyChanging();
					this._isused = value;
					this.SendPropertyChanged("isused");
					this.OnisusedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="S_area_U_firehouse", Storage="_S_area", ThisKey="aid", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public S_area S_area
		{
			get
			{
				return this._S_area.Entity;
			}
			set
			{
				S_area previousValue = this._S_area.Entity;
				if (((previousValue != value) 
							|| (this._S_area.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._S_area.Entity = null;
						previousValue.U_firehouse.Remove(this);
					}
					this._S_area.Entity = value;
					if ((value != null))
					{
						value.U_firehouse.Add(this);
						this._aid = value.id;
					}
					else
					{
						this._aid = default(short);
					}
					this.SendPropertyChanged("S_area");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.U_firemanage")]
	public partial class U_firemanage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _id;
		
		private string _name;
		
		private short _aid;
		
		private string _description;
		
		private bool _isused;
		
		private EntityRef<S_area> _S_area;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(short value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnaidChanging(short value);
    partial void OnaidChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnisusedChanging(bool value);
    partial void OnisusedChanged();
    #endregion
		
		public U_firemanage()
		{
			this._S_area = default(EntityRef<S_area>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_aid", DbType="SmallInt NOT NULL")]
		public short aid
		{
			get
			{
				return this._aid;
			}
			set
			{
				if ((this._aid != value))
				{
					if (this._S_area.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnaidChanging(value);
					this.SendPropertyChanging();
					this._aid = value;
					this.SendPropertyChanged("aid");
					this.OnaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isused", DbType="Bit NOT NULL")]
		public bool isused
		{
			get
			{
				return this._isused;
			}
			set
			{
				if ((this._isused != value))
				{
					this.OnisusedChanging(value);
					this.SendPropertyChanging();
					this._isused = value;
					this.SendPropertyChanged("isused");
					this.OnisusedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="S_area_U_firemanage", Storage="_S_area", ThisKey="aid", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public S_area S_area
		{
			get
			{
				return this._S_area.Entity;
			}
			set
			{
				S_area previousValue = this._S_area.Entity;
				if (((previousValue != value) 
							|| (this._S_area.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._S_area.Entity = null;
						previousValue.U_firemanage.Remove(this);
					}
					this._S_area.Entity = value;
					if ((value != null))
					{
						value.U_firemanage.Add(this);
						this._aid = value.id;
					}
					else
					{
						this._aid = default(short);
					}
					this.SendPropertyChanged("S_area");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.U_nodedata")]
	public partial class U_nodedata : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _lanid;
		
		private string _picpath;
		
		private string _picname;
		
		private string _picdesc;
		
		private string _description;
		
		private bool _mainmap;
		
		private short _sort;
		
		private bool _isused;
		
		private EntitySet<U_equipdata> _U_equipdata;
		
		private EntityRef<U_landata> _U_landata;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnlanidChanging(int value);
    partial void OnlanidChanged();
    partial void OnpicpathChanging(string value);
    partial void OnpicpathChanged();
    partial void OnpicnameChanging(string value);
    partial void OnpicnameChanged();
    partial void OnpicdescChanging(string value);
    partial void OnpicdescChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnmainmapChanging(bool value);
    partial void OnmainmapChanged();
    partial void OnsortChanging(short value);
    partial void OnsortChanged();
    partial void OnisusedChanging(bool value);
    partial void OnisusedChanged();
    #endregion
		
		public U_nodedata()
		{
			this._U_equipdata = new EntitySet<U_equipdata>(new Action<U_equipdata>(this.attach_U_equipdata), new Action<U_equipdata>(this.detach_U_equipdata));
			this._U_landata = default(EntityRef<U_landata>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lanid", DbType="Int NOT NULL")]
		public int lanid
		{
			get
			{
				return this._lanid;
			}
			set
			{
				if ((this._lanid != value))
				{
					if (this._U_landata.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlanidChanging(value);
					this.SendPropertyChanging();
					this._lanid = value;
					this.SendPropertyChanged("lanid");
					this.OnlanidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_picpath", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string picpath
		{
			get
			{
				return this._picpath;
			}
			set
			{
				if ((this._picpath != value))
				{
					this.OnpicpathChanging(value);
					this.SendPropertyChanging();
					this._picpath = value;
					this.SendPropertyChanged("picpath");
					this.OnpicpathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_picname", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string picname
		{
			get
			{
				return this._picname;
			}
			set
			{
				if ((this._picname != value))
				{
					this.OnpicnameChanging(value);
					this.SendPropertyChanging();
					this._picname = value;
					this.SendPropertyChanged("picname");
					this.OnpicnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_picdesc", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string picdesc
		{
			get
			{
				return this._picdesc;
			}
			set
			{
				if ((this._picdesc != value))
				{
					this.OnpicdescChanging(value);
					this.SendPropertyChanging();
					this._picdesc = value;
					this.SendPropertyChanged("picdesc");
					this.OnpicdescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mainmap", DbType="Bit NOT NULL")]
		public bool mainmap
		{
			get
			{
				return this._mainmap;
			}
			set
			{
				if ((this._mainmap != value))
				{
					this.OnmainmapChanging(value);
					this.SendPropertyChanging();
					this._mainmap = value;
					this.SendPropertyChanged("mainmap");
					this.OnmainmapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sort", DbType="SmallInt NOT NULL")]
		public short sort
		{
			get
			{
				return this._sort;
			}
			set
			{
				if ((this._sort != value))
				{
					this.OnsortChanging(value);
					this.SendPropertyChanging();
					this._sort = value;
					this.SendPropertyChanged("sort");
					this.OnsortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isused", DbType="Bit NOT NULL")]
		public bool isused
		{
			get
			{
				return this._isused;
			}
			set
			{
				if ((this._isused != value))
				{
					this.OnisusedChanging(value);
					this.SendPropertyChanging();
					this._isused = value;
					this.SendPropertyChanged("isused");
					this.OnisusedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="U_nodedata_U_equipdata", Storage="_U_equipdata", ThisKey="id", OtherKey="nid")]
		public EntitySet<U_equipdata> U_equipdata
		{
			get
			{
				return this._U_equipdata;
			}
			set
			{
				this._U_equipdata.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="U_landata_U_nodedata", Storage="_U_landata", ThisKey="lanid", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public U_landata U_landata
		{
			get
			{
				return this._U_landata.Entity;
			}
			set
			{
				U_landata previousValue = this._U_landata.Entity;
				if (((previousValue != value) 
							|| (this._U_landata.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._U_landata.Entity = null;
						previousValue.U_nodedata.Remove(this);
					}
					this._U_landata.Entity = value;
					if ((value != null))
					{
						value.U_nodedata.Add(this);
						this._lanid = value.id;
					}
					else
					{
						this._lanid = default(int);
					}
					this.SendPropertyChanged("U_landata");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_U_equipdata(U_equipdata entity)
		{
			this.SendPropertyChanging();
			entity.U_nodedata = this;
		}
		
		private void detach_U_equipdata(U_equipdata entity)
		{
			this.SendPropertyChanging();
			entity.U_nodedata = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.U_equipdata")]
	public partial class U_equipdata : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private int _nid;
		
		private short _x;
		
		private short _y;
		
		private string _description;
		
		private short _type;
		
		private bool _isused;
		
		private short _status;
		
		private string _logicid;
		
		private string _url;
		
		private EntityRef<U_nodedata> _U_nodedata;
		
		private EntityRef<U_equiptype> _U_equiptype;
		
		private EntityRef<S_equipstatus> _S_equipstatus;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnnidChanging(int value);
    partial void OnnidChanged();
    partial void OnxChanging(short value);
    partial void OnxChanged();
    partial void OnyChanging(short value);
    partial void OnyChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OntypeChanging(short value);
    partial void OntypeChanged();
    partial void OnisusedChanging(bool value);
    partial void OnisusedChanged();
    partial void OnstatusChanging(short value);
    partial void OnstatusChanged();
    partial void OnlogicidChanging(string value);
    partial void OnlogicidChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    #endregion
		
		public U_equipdata()
		{
			this._U_nodedata = default(EntityRef<U_nodedata>);
			this._U_equiptype = default(EntityRef<U_equiptype>);
			this._S_equipstatus = default(EntityRef<S_equipstatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nid", DbType="Int NOT NULL")]
		public int nid
		{
			get
			{
				return this._nid;
			}
			set
			{
				if ((this._nid != value))
				{
					if (this._U_nodedata.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnnidChanging(value);
					this.SendPropertyChanging();
					this._nid = value;
					this.SendPropertyChanged("nid");
					this.OnnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_x", DbType="SmallInt NOT NULL")]
		public short x
		{
			get
			{
				return this._x;
			}
			set
			{
				if ((this._x != value))
				{
					this.OnxChanging(value);
					this.SendPropertyChanging();
					this._x = value;
					this.SendPropertyChanged("x");
					this.OnxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_y", DbType="SmallInt NOT NULL")]
		public short y
		{
			get
			{
				return this._y;
			}
			set
			{
				if ((this._y != value))
				{
					this.OnyChanging(value);
					this.SendPropertyChanging();
					this._y = value;
					this.SendPropertyChanged("y");
					this.OnyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="SmallInt NOT NULL")]
		public short type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					if (this._U_equiptype.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isused", DbType="Bit NOT NULL")]
		public bool isused
		{
			get
			{
				return this._isused;
			}
			set
			{
				if ((this._isused != value))
				{
					this.OnisusedChanging(value);
					this.SendPropertyChanging();
					this._isused = value;
					this.SendPropertyChanged("isused");
					this.OnisusedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="SmallInt NOT NULL")]
		public short status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					if (this._S_equipstatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logicid", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string logicid
		{
			get
			{
				return this._logicid;
			}
			set
			{
				if ((this._logicid != value))
				{
					this.OnlogicidChanging(value);
					this.SendPropertyChanging();
					this._logicid = value;
					this.SendPropertyChanged("logicid");
					this.OnlogicidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_url", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="U_nodedata_U_equipdata", Storage="_U_nodedata", ThisKey="nid", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public U_nodedata U_nodedata
		{
			get
			{
				return this._U_nodedata.Entity;
			}
			set
			{
				U_nodedata previousValue = this._U_nodedata.Entity;
				if (((previousValue != value) 
							|| (this._U_nodedata.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._U_nodedata.Entity = null;
						previousValue.U_equipdata.Remove(this);
					}
					this._U_nodedata.Entity = value;
					if ((value != null))
					{
						value.U_equipdata.Add(this);
						this._nid = value.id;
					}
					else
					{
						this._nid = default(int);
					}
					this.SendPropertyChanged("U_nodedata");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="U_equiptype_U_equipdata", Storage="_U_equiptype", ThisKey="type", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public U_equiptype U_equiptype
		{
			get
			{
				return this._U_equiptype.Entity;
			}
			set
			{
				U_equiptype previousValue = this._U_equiptype.Entity;
				if (((previousValue != value) 
							|| (this._U_equiptype.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._U_equiptype.Entity = null;
						previousValue.U_equipdata.Remove(this);
					}
					this._U_equiptype.Entity = value;
					if ((value != null))
					{
						value.U_equipdata.Add(this);
						this._type = value.id;
					}
					else
					{
						this._type = default(short);
					}
					this.SendPropertyChanged("U_equiptype");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="S_equipstatus_U_equipdata", Storage="_S_equipstatus", ThisKey="status", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public S_equipstatus S_equipstatus
		{
			get
			{
				return this._S_equipstatus.Entity;
			}
			set
			{
				S_equipstatus previousValue = this._S_equipstatus.Entity;
				if (((previousValue != value) 
							|| (this._S_equipstatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._S_equipstatus.Entity = null;
						previousValue.U_equipdata.Remove(this);
					}
					this._S_equipstatus.Entity = value;
					if ((value != null))
					{
						value.U_equipdata.Add(this);
						this._status = value.id;
					}
					else
					{
						this._status = default(short);
					}
					this.SendPropertyChanged("S_equipstatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.S_lantype")]
	public partial class S_lantype : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _id;
		
		private string _name;
		
		private short _sort;
		
		private bool _isused;
		
		private EntitySet<U_landata> _U_landata;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(short value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnsortChanging(short value);
    partial void OnsortChanged();
    partial void OnisusedChanging(bool value);
    partial void OnisusedChanged();
    #endregion
		
		public S_lantype()
		{
			this._U_landata = new EntitySet<U_landata>(new Action<U_landata>(this.attach_U_landata), new Action<U_landata>(this.detach_U_landata));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sort", DbType="SmallInt NOT NULL")]
		public short sort
		{
			get
			{
				return this._sort;
			}
			set
			{
				if ((this._sort != value))
				{
					this.OnsortChanging(value);
					this.SendPropertyChanging();
					this._sort = value;
					this.SendPropertyChanged("sort");
					this.OnsortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isused", DbType="Bit NOT NULL")]
		public bool isused
		{
			get
			{
				return this._isused;
			}
			set
			{
				if ((this._isused != value))
				{
					this.OnisusedChanging(value);
					this.SendPropertyChanging();
					this._isused = value;
					this.SendPropertyChanged("isused");
					this.OnisusedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="S_lantype_U_landata", Storage="_U_landata", ThisKey="id", OtherKey="type")]
		public EntitySet<U_landata> U_landata
		{
			get
			{
				return this._U_landata;
			}
			set
			{
				this._U_landata.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_U_landata(U_landata entity)
		{
			this.SendPropertyChanging();
			entity.S_lantype = this;
		}
		
		private void detach_U_landata(U_landata entity)
		{
			this.SendPropertyChanging();
			entity.S_lantype = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.S_lancate")]
	public partial class S_lancate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _id;
		
		private string _name;
		
		private short _sort;
		
		private bool _isused;
		
		private EntitySet<U_landata> _U_landata;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(short value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnsortChanging(short value);
    partial void OnsortChanged();
    partial void OnisusedChanging(bool value);
    partial void OnisusedChanged();
    #endregion
		
		public S_lancate()
		{
			this._U_landata = new EntitySet<U_landata>(new Action<U_landata>(this.attach_U_landata), new Action<U_landata>(this.detach_U_landata));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sort", DbType="SmallInt NOT NULL")]
		public short sort
		{
			get
			{
				return this._sort;
			}
			set
			{
				if ((this._sort != value))
				{
					this.OnsortChanging(value);
					this.SendPropertyChanging();
					this._sort = value;
					this.SendPropertyChanged("sort");
					this.OnsortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isused", DbType="Bit NOT NULL")]
		public bool isused
		{
			get
			{
				return this._isused;
			}
			set
			{
				if ((this._isused != value))
				{
					this.OnisusedChanging(value);
					this.SendPropertyChanging();
					this._isused = value;
					this.SendPropertyChanged("isused");
					this.OnisusedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="S_lancate_U_landata", Storage="_U_landata", ThisKey="id", OtherKey="cate")]
		public EntitySet<U_landata> U_landata
		{
			get
			{
				return this._U_landata;
			}
			set
			{
				this._U_landata.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_U_landata(U_landata entity)
		{
			this.SendPropertyChanging();
			entity.S_lancate = this;
		}
		
		private void detach_U_landata(U_landata entity)
		{
			this.SendPropertyChanging();
			entity.S_lancate = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.U_property")]
	public partial class U_property : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _id;
		
		private string _name;
		
		private string _description;
		
		private bool _isused;
		
		private EntitySet<U_landata> _U_landata;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(short value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnisusedChanging(bool value);
    partial void OnisusedChanged();
    #endregion
		
		public U_property()
		{
			this._U_landata = new EntitySet<U_landata>(new Action<U_landata>(this.attach_U_landata), new Action<U_landata>(this.detach_U_landata));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isused", DbType="Bit NOT NULL")]
		public bool isused
		{
			get
			{
				return this._isused;
			}
			set
			{
				if ((this._isused != value))
				{
					this.OnisusedChanging(value);
					this.SendPropertyChanging();
					this._isused = value;
					this.SendPropertyChanged("isused");
					this.OnisusedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="U_property_U_landata", Storage="_U_landata", ThisKey="id", OtherKey="ptid")]
		public EntitySet<U_landata> U_landata
		{
			get
			{
				return this._U_landata;
			}
			set
			{
				this._U_landata.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_U_landata(U_landata entity)
		{
			this.SendPropertyChanging();
			entity.U_property = this;
		}
		
		private void detach_U_landata(U_landata entity)
		{
			this.SendPropertyChanging();
			entity.U_property = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.U_maintenance")]
	public partial class U_maintenance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _id;
		
		private string _name;
		
		private bool _isused;
		
		private EntitySet<U_landata> _U_landata;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(short value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnisusedChanging(bool value);
    partial void OnisusedChanged();
    #endregion
		
		public U_maintenance()
		{
			this._U_landata = new EntitySet<U_landata>(new Action<U_landata>(this.attach_U_landata), new Action<U_landata>(this.detach_U_landata));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isused", DbType="Bit NOT NULL")]
		public bool isused
		{
			get
			{
				return this._isused;
			}
			set
			{
				if ((this._isused != value))
				{
					this.OnisusedChanging(value);
					this.SendPropertyChanging();
					this._isused = value;
					this.SendPropertyChanged("isused");
					this.OnisusedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="U_maintenance_U_landata", Storage="_U_landata", ThisKey="id", OtherKey="mtid")]
		public EntitySet<U_landata> U_landata
		{
			get
			{
				return this._U_landata;
			}
			set
			{
				this._U_landata.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_U_landata(U_landata entity)
		{
			this.SendPropertyChanging();
			entity.U_maintenance = this;
		}
		
		private void detach_U_landata(U_landata entity)
		{
			this.SendPropertyChanging();
			entity.U_maintenance = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.S_log")]
	public partial class S_log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _tablename;
		
		private long _tableid;
		
		private int _mid;
		
		private System.DateTime _datetime;
		
		private string _discription;
		
		private EntityRef<U_members> _U_members;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OntablenameChanging(string value);
    partial void OntablenameChanged();
    partial void OntableidChanging(long value);
    partial void OntableidChanged();
    partial void OnmidChanging(int value);
    partial void OnmidChanged();
    partial void OndatetimeChanging(System.DateTime value);
    partial void OndatetimeChanged();
    partial void OndiscriptionChanging(string value);
    partial void OndiscriptionChanged();
    #endregion
		
		public S_log()
		{
			this._U_members = default(EntityRef<U_members>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tablename", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string tablename
		{
			get
			{
				return this._tablename;
			}
			set
			{
				if ((this._tablename != value))
				{
					this.OntablenameChanging(value);
					this.SendPropertyChanging();
					this._tablename = value;
					this.SendPropertyChanged("tablename");
					this.OntablenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tableid", DbType="BigInt NOT NULL")]
		public long tableid
		{
			get
			{
				return this._tableid;
			}
			set
			{
				if ((this._tableid != value))
				{
					this.OntableidChanging(value);
					this.SendPropertyChanging();
					this._tableid = value;
					this.SendPropertyChanged("tableid");
					this.OntableidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mid", DbType="Int NOT NULL")]
		public int mid
		{
			get
			{
				return this._mid;
			}
			set
			{
				if ((this._mid != value))
				{
					if (this._U_members.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmidChanging(value);
					this.SendPropertyChanging();
					this._mid = value;
					this.SendPropertyChanged("mid");
					this.OnmidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_datetime", DbType="DateTime NOT NULL")]
		public System.DateTime datetime
		{
			get
			{
				return this._datetime;
			}
			set
			{
				if ((this._datetime != value))
				{
					this.OndatetimeChanging(value);
					this.SendPropertyChanging();
					this._datetime = value;
					this.SendPropertyChanged("datetime");
					this.OndatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_discription", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string discription
		{
			get
			{
				return this._discription;
			}
			set
			{
				if ((this._discription != value))
				{
					this.OndiscriptionChanging(value);
					this.SendPropertyChanging();
					this._discription = value;
					this.SendPropertyChanged("discription");
					this.OndiscriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="U_members_S_log", Storage="_U_members", ThisKey="mid", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public U_members U_members
		{
			get
			{
				return this._U_members.Entity;
			}
			set
			{
				U_members previousValue = this._U_members.Entity;
				if (((previousValue != value) 
							|| (this._U_members.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._U_members.Entity = null;
						previousValue.S_log.Remove(this);
					}
					this._U_members.Entity = value;
					if ((value != null))
					{
						value.S_log.Add(this);
						this._mid = value.id;
					}
					else
					{
						this._mid = default(int);
					}
					this.SendPropertyChanged("U_members");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.U_equiptype")]
	public partial class U_equiptype : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _id;
		
		private string _name;
		
		private short _sort;
		
		private string _icon;
		
		private bool _isused;
		
		private EntitySet<U_equipdata> _U_equipdata;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(short value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnsortChanging(short value);
    partial void OnsortChanged();
    partial void OniconChanging(string value);
    partial void OniconChanged();
    partial void OnisusedChanging(bool value);
    partial void OnisusedChanged();
    #endregion
		
		public U_equiptype()
		{
			this._U_equipdata = new EntitySet<U_equipdata>(new Action<U_equipdata>(this.attach_U_equipdata), new Action<U_equipdata>(this.detach_U_equipdata));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sort", DbType="SmallInt NOT NULL")]
		public short sort
		{
			get
			{
				return this._sort;
			}
			set
			{
				if ((this._sort != value))
				{
					this.OnsortChanging(value);
					this.SendPropertyChanging();
					this._sort = value;
					this.SendPropertyChanged("sort");
					this.OnsortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_icon", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string icon
		{
			get
			{
				return this._icon;
			}
			set
			{
				if ((this._icon != value))
				{
					this.OniconChanging(value);
					this.SendPropertyChanging();
					this._icon = value;
					this.SendPropertyChanged("icon");
					this.OniconChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isused", DbType="Bit NOT NULL")]
		public bool isused
		{
			get
			{
				return this._isused;
			}
			set
			{
				if ((this._isused != value))
				{
					this.OnisusedChanging(value);
					this.SendPropertyChanging();
					this._isused = value;
					this.SendPropertyChanged("isused");
					this.OnisusedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="U_equiptype_U_equipdata", Storage="_U_equipdata", ThisKey="id", OtherKey="type")]
		public EntitySet<U_equipdata> U_equipdata
		{
			get
			{
				return this._U_equipdata;
			}
			set
			{
				this._U_equipdata.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_U_equipdata(U_equipdata entity)
		{
			this.SendPropertyChanging();
			entity.U_equiptype = this;
		}
		
		private void detach_U_equipdata(U_equipdata entity)
		{
			this.SendPropertyChanging();
			entity.U_equiptype = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.S_equipstatus")]
	public partial class S_equipstatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _id;
		
		private string _name;
		
		private bool _isused;
		
		private EntitySet<U_equipdata> _U_equipdata;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(short value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnisusedChanging(bool value);
    partial void OnisusedChanged();
    #endregion
		
		public S_equipstatus()
		{
			this._U_equipdata = new EntitySet<U_equipdata>(new Action<U_equipdata>(this.attach_U_equipdata), new Action<U_equipdata>(this.detach_U_equipdata));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isused", DbType="Bit NOT NULL")]
		public bool isused
		{
			get
			{
				return this._isused;
			}
			set
			{
				if ((this._isused != value))
				{
					this.OnisusedChanging(value);
					this.SendPropertyChanging();
					this._isused = value;
					this.SendPropertyChanged("isused");
					this.OnisusedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="S_equipstatus_U_equipdata", Storage="_U_equipdata", ThisKey="id", OtherKey="status")]
		public EntitySet<U_equipdata> U_equipdata
		{
			get
			{
				return this._U_equipdata;
			}
			set
			{
				this._U_equipdata.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_U_equipdata(U_equipdata entity)
		{
			this.SendPropertyChanging();
			entity.S_equipstatus = this;
		}
		
		private void detach_U_equipdata(U_equipdata entity)
		{
			this.SendPropertyChanging();
			entity.S_equipstatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.S_area")]
	public partial class S_area : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _id;
		
		private short _cid;
		
		private string _name;
		
		private double _lng;
		
		private double _lat;
		
		private short _zoom;
		
		private bool _type;
		
		private short _sort;
		
		private bool _isused;
		
		private EntitySet<S_controlcenter> _S_controlcenter;
		
		private EntitySet<U_firehouse> _U_firehouse;
		
		private EntitySet<U_firemanage> _U_firemanage;
		
		private EntitySet<U_landata> _U_landata;
		
		private EntityRef<S_city> _S_city;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(short value);
    partial void OnidChanged();
    partial void OncidChanging(short value);
    partial void OncidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnlngChanging(double value);
    partial void OnlngChanged();
    partial void OnlatChanging(double value);
    partial void OnlatChanged();
    partial void OnzoomChanging(short value);
    partial void OnzoomChanged();
    partial void OntypeChanging(bool value);
    partial void OntypeChanged();
    partial void OnsortChanging(short value);
    partial void OnsortChanged();
    partial void OnisusedChanging(bool value);
    partial void OnisusedChanged();
    #endregion
		
		public S_area()
		{
			this._S_controlcenter = new EntitySet<S_controlcenter>(new Action<S_controlcenter>(this.attach_S_controlcenter), new Action<S_controlcenter>(this.detach_S_controlcenter));
			this._U_firehouse = new EntitySet<U_firehouse>(new Action<U_firehouse>(this.attach_U_firehouse), new Action<U_firehouse>(this.detach_U_firehouse));
			this._U_firemanage = new EntitySet<U_firemanage>(new Action<U_firemanage>(this.attach_U_firemanage), new Action<U_firemanage>(this.detach_U_firemanage));
			this._U_landata = new EntitySet<U_landata>(new Action<U_landata>(this.attach_U_landata), new Action<U_landata>(this.detach_U_landata));
			this._S_city = default(EntityRef<S_city>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cid", DbType="SmallInt NOT NULL")]
		public short cid
		{
			get
			{
				return this._cid;
			}
			set
			{
				if ((this._cid != value))
				{
					if (this._S_city.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncidChanging(value);
					this.SendPropertyChanging();
					this._cid = value;
					this.SendPropertyChanged("cid");
					this.OncidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lng", DbType="Float NOT NULL")]
		public double lng
		{
			get
			{
				return this._lng;
			}
			set
			{
				if ((this._lng != value))
				{
					this.OnlngChanging(value);
					this.SendPropertyChanging();
					this._lng = value;
					this.SendPropertyChanged("lng");
					this.OnlngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lat", DbType="Float NOT NULL")]
		public double lat
		{
			get
			{
				return this._lat;
			}
			set
			{
				if ((this._lat != value))
				{
					this.OnlatChanging(value);
					this.SendPropertyChanging();
					this._lat = value;
					this.SendPropertyChanged("lat");
					this.OnlatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_zoom", DbType="SmallInt NOT NULL")]
		public short zoom
		{
			get
			{
				return this._zoom;
			}
			set
			{
				if ((this._zoom != value))
				{
					this.OnzoomChanging(value);
					this.SendPropertyChanging();
					this._zoom = value;
					this.SendPropertyChanged("zoom");
					this.OnzoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="Bit NOT NULL")]
		public bool type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sort", DbType="SmallInt NOT NULL")]
		public short sort
		{
			get
			{
				return this._sort;
			}
			set
			{
				if ((this._sort != value))
				{
					this.OnsortChanging(value);
					this.SendPropertyChanging();
					this._sort = value;
					this.SendPropertyChanged("sort");
					this.OnsortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isused", DbType="Bit NOT NULL")]
		public bool isused
		{
			get
			{
				return this._isused;
			}
			set
			{
				if ((this._isused != value))
				{
					this.OnisusedChanging(value);
					this.SendPropertyChanging();
					this._isused = value;
					this.SendPropertyChanged("isused");
					this.OnisusedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="S_area_S_controlcenter", Storage="_S_controlcenter", ThisKey="id", OtherKey="aid")]
		public EntitySet<S_controlcenter> S_controlcenter
		{
			get
			{
				return this._S_controlcenter;
			}
			set
			{
				this._S_controlcenter.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="S_area_U_firehouse", Storage="_U_firehouse", ThisKey="id", OtherKey="aid")]
		public EntitySet<U_firehouse> U_firehouse
		{
			get
			{
				return this._U_firehouse;
			}
			set
			{
				this._U_firehouse.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="S_area_U_firemanage", Storage="_U_firemanage", ThisKey="id", OtherKey="aid")]
		public EntitySet<U_firemanage> U_firemanage
		{
			get
			{
				return this._U_firemanage;
			}
			set
			{
				this._U_firemanage.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="S_area_U_landata", Storage="_U_landata", ThisKey="id", OtherKey="areaid")]
		public EntitySet<U_landata> U_landata
		{
			get
			{
				return this._U_landata;
			}
			set
			{
				this._U_landata.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="S_city_S_area", Storage="_S_city", ThisKey="cid", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public S_city S_city
		{
			get
			{
				return this._S_city.Entity;
			}
			set
			{
				S_city previousValue = this._S_city.Entity;
				if (((previousValue != value) 
							|| (this._S_city.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._S_city.Entity = null;
						previousValue.S_area.Remove(this);
					}
					this._S_city.Entity = value;
					if ((value != null))
					{
						value.S_area.Add(this);
						this._cid = value.id;
					}
					else
					{
						this._cid = default(short);
					}
					this.SendPropertyChanged("S_city");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_S_controlcenter(S_controlcenter entity)
		{
			this.SendPropertyChanging();
			entity.S_area = this;
		}
		
		private void detach_S_controlcenter(S_controlcenter entity)
		{
			this.SendPropertyChanging();
			entity.S_area = null;
		}
		
		private void attach_U_firehouse(U_firehouse entity)
		{
			this.SendPropertyChanging();
			entity.S_area = this;
		}
		
		private void detach_U_firehouse(U_firehouse entity)
		{
			this.SendPropertyChanging();
			entity.S_area = null;
		}
		
		private void attach_U_firemanage(U_firemanage entity)
		{
			this.SendPropertyChanging();
			entity.S_area = this;
		}
		
		private void detach_U_firemanage(U_firemanage entity)
		{
			this.SendPropertyChanging();
			entity.S_area = null;
		}
		
		private void attach_U_landata(U_landata entity)
		{
			this.SendPropertyChanging();
			entity.S_area = this;
		}
		
		private void detach_U_landata(U_landata entity)
		{
			this.SendPropertyChanging();
			entity.S_area = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.U_news")]
	public partial class U_news : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _mid;
		
		private string _title;
		
		private string _context;
		
		private System.DateTime _datetime;
		
		private bool _cn;
		
		private bool _isused;
		
		private EntityRef<U_members> _U_members;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnmidChanging(int value);
    partial void OnmidChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OncontextChanging(string value);
    partial void OncontextChanged();
    partial void OndatetimeChanging(System.DateTime value);
    partial void OndatetimeChanged();
    partial void OncnChanging(bool value);
    partial void OncnChanged();
    partial void OnisusedChanging(bool value);
    partial void OnisusedChanged();
    #endregion
		
		public U_news()
		{
			this._U_members = default(EntityRef<U_members>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mid", DbType="Int NOT NULL")]
		public int mid
		{
			get
			{
				return this._mid;
			}
			set
			{
				if ((this._mid != value))
				{
					if (this._U_members.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmidChanging(value);
					this.SendPropertyChanging();
					this._mid = value;
					this.SendPropertyChanged("mid");
					this.OnmidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_context", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string context
		{
			get
			{
				return this._context;
			}
			set
			{
				if ((this._context != value))
				{
					this.OncontextChanging(value);
					this.SendPropertyChanging();
					this._context = value;
					this.SendPropertyChanged("context");
					this.OncontextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_datetime", DbType="DateTime NOT NULL")]
		public System.DateTime datetime
		{
			get
			{
				return this._datetime;
			}
			set
			{
				if ((this._datetime != value))
				{
					this.OndatetimeChanging(value);
					this.SendPropertyChanging();
					this._datetime = value;
					this.SendPropertyChanged("datetime");
					this.OndatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cn", DbType="Bit NOT NULL")]
		public bool cn
		{
			get
			{
				return this._cn;
			}
			set
			{
				if ((this._cn != value))
				{
					this.OncnChanging(value);
					this.SendPropertyChanging();
					this._cn = value;
					this.SendPropertyChanged("cn");
					this.OncnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isused", DbType="Bit NOT NULL")]
		public bool isused
		{
			get
			{
				return this._isused;
			}
			set
			{
				if ((this._isused != value))
				{
					this.OnisusedChanging(value);
					this.SendPropertyChanging();
					this._isused = value;
					this.SendPropertyChanged("isused");
					this.OnisusedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="U_members_U_news", Storage="_U_members", ThisKey="mid", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public U_members U_members
		{
			get
			{
				return this._U_members.Entity;
			}
			set
			{
				U_members previousValue = this._U_members.Entity;
				if (((previousValue != value) 
							|| (this._U_members.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._U_members.Entity = null;
						previousValue.U_news.Remove(this);
					}
					this._U_members.Entity = value;
					if ((value != null))
					{
						value.U_news.Add(this);
						this._mid = value.id;
					}
					else
					{
						this._mid = default(int);
					}
					this.SendPropertyChanged("U_members");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.U_members")]
	public partial class U_members : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _account;
		
		private string _password;
		
		private string _name;
		
		private string _tel;
		
		private bool _isused;
		
		private short _type;
		
		private long _linkid;
		
		private EntitySet<S_log> _S_log;
		
		private EntitySet<U_news> _U_news;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnaccountChanging(string value);
    partial void OnaccountChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OntelChanging(string value);
    partial void OntelChanged();
    partial void OnisusedChanging(bool value);
    partial void OnisusedChanged();
    partial void OntypeChanging(short value);
    partial void OntypeChanged();
    partial void OnlinkidChanging(long value);
    partial void OnlinkidChanged();
    #endregion
		
		public U_members()
		{
			this._S_log = new EntitySet<S_log>(new Action<S_log>(this.attach_S_log), new Action<S_log>(this.detach_S_log));
			this._U_news = new EntitySet<U_news>(new Action<U_news>(this.attach_U_news), new Action<U_news>(this.detach_U_news));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_account", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string account
		{
			get
			{
				return this._account;
			}
			set
			{
				if ((this._account != value))
				{
					this.OnaccountChanging(value);
					this.SendPropertyChanging();
					this._account = value;
					this.SendPropertyChanged("account");
					this.OnaccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tel", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string tel
		{
			get
			{
				return this._tel;
			}
			set
			{
				if ((this._tel != value))
				{
					this.OntelChanging(value);
					this.SendPropertyChanging();
					this._tel = value;
					this.SendPropertyChanged("tel");
					this.OntelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isused", DbType="Bit NOT NULL")]
		public bool isused
		{
			get
			{
				return this._isused;
			}
			set
			{
				if ((this._isused != value))
				{
					this.OnisusedChanging(value);
					this.SendPropertyChanging();
					this._isused = value;
					this.SendPropertyChanged("isused");
					this.OnisusedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="SmallInt NOT NULL")]
		public short type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_linkid", DbType="BigInt NOT NULL")]
		public long linkid
		{
			get
			{
				return this._linkid;
			}
			set
			{
				if ((this._linkid != value))
				{
					this.OnlinkidChanging(value);
					this.SendPropertyChanging();
					this._linkid = value;
					this.SendPropertyChanged("linkid");
					this.OnlinkidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="U_members_S_log", Storage="_S_log", ThisKey="id", OtherKey="mid")]
		public EntitySet<S_log> S_log
		{
			get
			{
				return this._S_log;
			}
			set
			{
				this._S_log.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="U_members_U_news", Storage="_U_news", ThisKey="id", OtherKey="mid")]
		public EntitySet<U_news> U_news
		{
			get
			{
				return this._U_news;
			}
			set
			{
				this._U_news.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_S_log(S_log entity)
		{
			this.SendPropertyChanging();
			entity.U_members = this;
		}
		
		private void detach_S_log(S_log entity)
		{
			this.SendPropertyChanging();
			entity.U_members = null;
		}
		
		private void attach_U_news(U_news entity)
		{
			this.SendPropertyChanging();
			entity.U_members = this;
		}
		
		private void detach_U_news(U_news entity)
		{
			this.SendPropertyChanging();
			entity.U_members = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.U_landata")]
	public partial class U_landata : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private short _areaid;
		
		private double _lng;
		
		private double _lat;
		
		private string _building;
		
		private string _address;
		
		private short _ptid;
		
		private short _mtid;
		
		private bool _isused;
		
		private short _cate;
		
		private short _type;
		
		private string _manager;
		
		private string _HOST_CODE;
		
		private string _PASSWD;
		
		private char _ACTIVE;
		
		private EntitySet<U_nodedata> _U_nodedata;
		
		private EntityRef<S_area> _S_area;
		
		private EntityRef<S_lancate> _S_lancate;
		
		private EntityRef<S_lantype> _S_lantype;
		
		private EntityRef<U_maintenance> _U_maintenance;
		
		private EntityRef<U_property> _U_property;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnareaidChanging(short value);
    partial void OnareaidChanged();
    partial void OnlngChanging(double value);
    partial void OnlngChanged();
    partial void OnlatChanging(double value);
    partial void OnlatChanged();
    partial void OnbuildingChanging(string value);
    partial void OnbuildingChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnptidChanging(short value);
    partial void OnptidChanged();
    partial void OnmtidChanging(short value);
    partial void OnmtidChanged();
    partial void OnisusedChanging(bool value);
    partial void OnisusedChanged();
    partial void OncateChanging(short value);
    partial void OncateChanged();
    partial void OntypeChanging(short value);
    partial void OntypeChanged();
    partial void OnmanagerChanging(string value);
    partial void OnmanagerChanged();
    partial void OnHOST_CODEChanging(string value);
    partial void OnHOST_CODEChanged();
    partial void OnPASSWDChanging(string value);
    partial void OnPASSWDChanged();
    partial void OnACTIVEChanging(char value);
    partial void OnACTIVEChanged();
    #endregion
		
		public U_landata()
		{
			this._U_nodedata = new EntitySet<U_nodedata>(new Action<U_nodedata>(this.attach_U_nodedata), new Action<U_nodedata>(this.detach_U_nodedata));
			this._S_area = default(EntityRef<S_area>);
			this._S_lancate = default(EntityRef<S_lancate>);
			this._S_lantype = default(EntityRef<S_lantype>);
			this._U_maintenance = default(EntityRef<U_maintenance>);
			this._U_property = default(EntityRef<U_property>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_areaid", DbType="SmallInt NOT NULL")]
		public short areaid
		{
			get
			{
				return this._areaid;
			}
			set
			{
				if ((this._areaid != value))
				{
					if (this._S_area.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnareaidChanging(value);
					this.SendPropertyChanging();
					this._areaid = value;
					this.SendPropertyChanged("areaid");
					this.OnareaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lng", DbType="Float NOT NULL")]
		public double lng
		{
			get
			{
				return this._lng;
			}
			set
			{
				if ((this._lng != value))
				{
					this.OnlngChanging(value);
					this.SendPropertyChanging();
					this._lng = value;
					this.SendPropertyChanged("lng");
					this.OnlngChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lat", DbType="Float NOT NULL")]
		public double lat
		{
			get
			{
				return this._lat;
			}
			set
			{
				if ((this._lat != value))
				{
					this.OnlatChanging(value);
					this.SendPropertyChanging();
					this._lat = value;
					this.SendPropertyChanged("lat");
					this.OnlatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_building", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string building
		{
			get
			{
				return this._building;
			}
			set
			{
				if ((this._building != value))
				{
					this.OnbuildingChanging(value);
					this.SendPropertyChanging();
					this._building = value;
					this.SendPropertyChanged("building");
					this.OnbuildingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ptid", DbType="SmallInt NOT NULL")]
		public short ptid
		{
			get
			{
				return this._ptid;
			}
			set
			{
				if ((this._ptid != value))
				{
					if (this._U_property.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnptidChanging(value);
					this.SendPropertyChanging();
					this._ptid = value;
					this.SendPropertyChanged("ptid");
					this.OnptidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mtid", DbType="SmallInt NOT NULL")]
		public short mtid
		{
			get
			{
				return this._mtid;
			}
			set
			{
				if ((this._mtid != value))
				{
					if (this._U_maintenance.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmtidChanging(value);
					this.SendPropertyChanging();
					this._mtid = value;
					this.SendPropertyChanged("mtid");
					this.OnmtidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isused", DbType="Bit NOT NULL")]
		public bool isused
		{
			get
			{
				return this._isused;
			}
			set
			{
				if ((this._isused != value))
				{
					this.OnisusedChanging(value);
					this.SendPropertyChanging();
					this._isused = value;
					this.SendPropertyChanged("isused");
					this.OnisusedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cate", DbType="SmallInt NOT NULL")]
		public short cate
		{
			get
			{
				return this._cate;
			}
			set
			{
				if ((this._cate != value))
				{
					if (this._S_lancate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncateChanging(value);
					this.SendPropertyChanging();
					this._cate = value;
					this.SendPropertyChanged("cate");
					this.OncateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="SmallInt NOT NULL")]
		public short type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					if (this._S_lantype.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_manager", DbType="NVarChar(50)")]
		public string manager
		{
			get
			{
				return this._manager;
			}
			set
			{
				if ((this._manager != value))
				{
					this.OnmanagerChanging(value);
					this.SendPropertyChanging();
					this._manager = value;
					this.SendPropertyChanged("manager");
					this.OnmanagerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HOST_CODE", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string HOST_CODE
		{
			get
			{
				return this._HOST_CODE;
			}
			set
			{
				if ((this._HOST_CODE != value))
				{
					this.OnHOST_CODEChanging(value);
					this.SendPropertyChanging();
					this._HOST_CODE = value;
					this.SendPropertyChanged("HOST_CODE");
					this.OnHOST_CODEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PASSWD", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PASSWD
		{
			get
			{
				return this._PASSWD;
			}
			set
			{
				if ((this._PASSWD != value))
				{
					this.OnPASSWDChanging(value);
					this.SendPropertyChanging();
					this._PASSWD = value;
					this.SendPropertyChanged("PASSWD");
					this.OnPASSWDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACTIVE", DbType="Char(1) NOT NULL")]
		public char ACTIVE
		{
			get
			{
				return this._ACTIVE;
			}
			set
			{
				if ((this._ACTIVE != value))
				{
					this.OnACTIVEChanging(value);
					this.SendPropertyChanging();
					this._ACTIVE = value;
					this.SendPropertyChanged("ACTIVE");
					this.OnACTIVEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="U_landata_U_nodedata", Storage="_U_nodedata", ThisKey="id", OtherKey="lanid")]
		public EntitySet<U_nodedata> U_nodedata
		{
			get
			{
				return this._U_nodedata;
			}
			set
			{
				this._U_nodedata.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="S_area_U_landata", Storage="_S_area", ThisKey="areaid", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public S_area S_area
		{
			get
			{
				return this._S_area.Entity;
			}
			set
			{
				S_area previousValue = this._S_area.Entity;
				if (((previousValue != value) 
							|| (this._S_area.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._S_area.Entity = null;
						previousValue.U_landata.Remove(this);
					}
					this._S_area.Entity = value;
					if ((value != null))
					{
						value.U_landata.Add(this);
						this._areaid = value.id;
					}
					else
					{
						this._areaid = default(short);
					}
					this.SendPropertyChanged("S_area");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="S_lancate_U_landata", Storage="_S_lancate", ThisKey="cate", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public S_lancate S_lancate
		{
			get
			{
				return this._S_lancate.Entity;
			}
			set
			{
				S_lancate previousValue = this._S_lancate.Entity;
				if (((previousValue != value) 
							|| (this._S_lancate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._S_lancate.Entity = null;
						previousValue.U_landata.Remove(this);
					}
					this._S_lancate.Entity = value;
					if ((value != null))
					{
						value.U_landata.Add(this);
						this._cate = value.id;
					}
					else
					{
						this._cate = default(short);
					}
					this.SendPropertyChanged("S_lancate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="S_lantype_U_landata", Storage="_S_lantype", ThisKey="type", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public S_lantype S_lantype
		{
			get
			{
				return this._S_lantype.Entity;
			}
			set
			{
				S_lantype previousValue = this._S_lantype.Entity;
				if (((previousValue != value) 
							|| (this._S_lantype.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._S_lantype.Entity = null;
						previousValue.U_landata.Remove(this);
					}
					this._S_lantype.Entity = value;
					if ((value != null))
					{
						value.U_landata.Add(this);
						this._type = value.id;
					}
					else
					{
						this._type = default(short);
					}
					this.SendPropertyChanged("S_lantype");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="U_maintenance_U_landata", Storage="_U_maintenance", ThisKey="mtid", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public U_maintenance U_maintenance
		{
			get
			{
				return this._U_maintenance.Entity;
			}
			set
			{
				U_maintenance previousValue = this._U_maintenance.Entity;
				if (((previousValue != value) 
							|| (this._U_maintenance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._U_maintenance.Entity = null;
						previousValue.U_landata.Remove(this);
					}
					this._U_maintenance.Entity = value;
					if ((value != null))
					{
						value.U_landata.Add(this);
						this._mtid = value.id;
					}
					else
					{
						this._mtid = default(short);
					}
					this.SendPropertyChanged("U_maintenance");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="U_property_U_landata", Storage="_U_property", ThisKey="ptid", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public U_property U_property
		{
			get
			{
				return this._U_property.Entity;
			}
			set
			{
				U_property previousValue = this._U_property.Entity;
				if (((previousValue != value) 
							|| (this._U_property.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._U_property.Entity = null;
						previousValue.U_landata.Remove(this);
					}
					this._U_property.Entity = value;
					if ((value != null))
					{
						value.U_landata.Add(this);
						this._ptid = value.id;
					}
					else
					{
						this._ptid = default(short);
					}
					this.SendPropertyChanged("U_property");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_U_nodedata(U_nodedata entity)
		{
			this.SendPropertyChanging();
			entity.U_landata = this;
		}
		
		private void detach_U_nodedata(U_nodedata entity)
		{
			this.SendPropertyChanging();
			entity.U_landata = null;
		}
	}
}
#pragma warning restore 1591
